use crate::{
    file::Rectangle,
    graphics::{NameOrDictByRef, NameOrStream},
    object::{Object, ObjectValueError, Stream},
};
use bitflags::bitflags;
use nipdf_macro::{pdf_object, TryFromIntObjectForBitflags, TryFromNameObject};
use prescript::NOTDEF;
use std::{borrow::Cow, collections::HashMap, convert::AsRef};

#[derive(Debug, Copy, Clone, PartialEq, Eq, TryFromNameObject)]
pub enum FontType {
    Type0,
    Type1,
    MMType1,
    Type3,
    TrueType,
}

#[derive(Debug, Copy, Clone, PartialEq, Eq, TryFromNameObject)]
pub enum CIDFontType {
    CIDFontType0,
    CIDFontType2,
}

#[pdf_object("Font")]
pub trait FontDictTrait {
    #[try_from]
    fn subtype(&self) -> FontType;

    #[self_as]
    fn type0(&self) -> Type0FontDict<'a, 'b>;

    #[self_as]
    fn type1(&self) -> Type1FontDict<'a, 'b>;

    #[self_as]
    fn truetype(&self) -> TrueTypeFontDict<'a, 'b>;

    #[nested]
    fn font_descriptor(&self) -> Option<FontDescriptorDict<'a, 'b>>;

    #[try_from]
    fn encoding(&self) -> Option<NameOrDictByRef<'a, 'b>>;

    #[typ("Name")]
    fn base_font(&self) -> &str;
}

#[pdf_object(("Font", "Type0"))]
pub trait Type0FontDictTrait {
    #[typ("Name")]
    fn base_font(&self) -> &str;
    #[try_from]
    fn encoding(&self) -> NameOrStream<'a, 'b>;
    #[nested]
    fn descendant_fonts(&self) -> Vec<CIDFontDict<'a, 'b>>;
    fn to_unicode(&self) -> Option<&'b Stream<'a>>;
}

/// For standard 14 fonts, font_descriptor/first_char/last_char/widths may not exist.
/// they should all exist or not exist. See PDF32000_2008.pdf page 255
#[pdf_object(("Font", "Type1"))]
pub trait Type1FontDictTrait {
    #[typ("Name")]
    fn base_font(&self) -> &str;
    /// If font is the standard 14 fonts, it may not exist.
    fn first_char(&self) -> Option<u32>;
    /// if font is the standard 14 fonts, it may not exist.
    fn last_char(&self) -> Option<u32>;
    /// if font is the standard 14 fonts, it may not exist.
    fn widths(&self) -> Vec<u32>;
    /// if font is the standard 14 fonts, it may not exist.
    #[nested]
    fn font_descriptor(&self) -> Option<FontDescriptorDict<'a, 'b>>;
    #[try_from]
    fn encoding(&self) -> Option<NameOrDictByRef<'a, 'b>>;
    fn to_unicode(&self) -> Option<&'b Stream<'a>>;
}

impl<'a, 'b> FontDict<'a, 'b> {
    fn resolve_name(&self) -> anyhow::Result<&str> {
        if let Some(desc) = self.font_descriptor()? {
            return desc.font_name();
        }

        self.base_font()
    }

    pub fn font_name(&self) -> anyhow::Result<&str> {
        let r = self.resolve_name()?;

        // if font is subset, the name will prefixed with a tag,
        // which is a string of 6 uppercase letters, followed by a plus sign (+).
        if r.len() > 7 && r.as_bytes()[6] == b'+' {
            Ok(&r[7..])
        } else {
            Ok(r)
        }
    }
}

#[pdf_object(("Font", "TrueType"))]
pub trait TrueTypeFontDictTrait {
    #[typ("Name")]
    fn base_font(&self) -> &str;
    fn first_char(&self) -> u32;
    fn last_char(&self) -> u32;
    fn widths(&self) -> Vec<u32>;
    #[nested]
    fn font_descriptor(&self) -> Option<FontDescriptorDict<'a, 'b>>;
    #[try_from]
    fn encoding(&self) -> Option<NameOrDictByRef<'a, 'b>>;
    fn to_unicode(&self) -> Option<&'b Stream<'a>>;
}

#[derive(Debug, PartialEq)]
pub enum CIDFontWidthGroup {
    NConsecutive((u32, Vec<u16>)),
    FirstLast { first: u32, last: u32, width: u16 },
}

#[derive(Debug, PartialEq)]
pub struct CIDFontWidths(Vec<CIDFontWidthGroup>);
impl CIDFontWidths {
    /// Return None if ch out of range
    pub(crate) fn char_width(&self, ch: u32) -> Option<u32> {
        for group in &self.0 {
            match group {
                CIDFontWidthGroup::NConsecutive((first, widths)) => {
                    if ch >= *first && ch < *first + widths.len() as u32 {
                        return Some(widths[(ch - first) as usize] as u32);
                    }
                }
                CIDFontWidthGroup::FirstLast { first, last, width } => {
                    if ch >= *first && ch <= *last {
                        return Some(*width as u32);
                    }
                }
            }
        }
        None
    }
}

impl<'a, 'b> TryFrom<&'b Object<'a>> for CIDFontWidths {
    type Error = ObjectValueError;

    fn try_from(obj: &'b Object<'a>) -> Result<Self, Self::Error> {
        let mut widths = Vec::new();
        let Object::Array(arr) = obj else {
            return Err(Self::Error::UnexpectedType);
        };

        let mut iter = arr.iter();
        while let Some(first) = iter.next() {
            let first = first.as_int()?;
            let second = iter.next().ok_or(Self::Error::UnexpectedType)?;
            match second {
                Object::Array(arr) => {
                    let mut width = Vec::with_capacity(arr.len());
                    for num in arr.iter() {
                        let num = num.as_int()? as u16;
                        width.push(num);
                    }
                    widths.push(CIDFontWidthGroup::NConsecutive((first as u32, width)));
                }
                Object::Integer(last) => {
                    let width = iter.next().ok_or(Self::Error::UnexpectedType)?;
                    widths.push(CIDFontWidthGroup::FirstLast {
                        first: first as u32,
                        last: *last as u32,
                        width: width.as_int()? as u16,
                    });
                }
                _ => return Err(Self::Error::UnexpectedType),
            }
        }
        Ok(CIDFontWidths(widths))
    }
}

#[pdf_object("Font")]
pub trait CIDFontDictTrait {
    #[try_from]
    fn subtype(&self) -> CIDFontType;
    #[typ("Name")]
    fn base_font(&self) -> &str;
    #[nested]
    fn font_descriptor(&self) -> Option<FontDescriptorDict<'a, 'b>>;
    #[default(1000u32)]
    fn dw(&self) -> u32;
    #[try_from]
    fn w(&self) -> CIDFontWidths;
    #[try_from]
    fn cid_to_gid_map(&self) -> Option<NameOrStream<'a, 'b>>;
}

#[derive(Copy, Clone, PartialEq, Eq, TryFromNameObject)]
pub enum FontStretch {
    UltraCondensed,
    ExtraCondensed,
    Condensed,
    SemiCondensed,
    Normal,
    SemiExpanded,
    Expended,
    ExtraExpanded,
    UltraExpanded,
}

impl From<FontStretch> for fontdb::Stretch {
    fn from(stretch: FontStretch) -> Self {
        match stretch {
            FontStretch::UltraCondensed => Self::UltraCondensed,
            FontStretch::ExtraCondensed => Self::ExtraCondensed,
            FontStretch::Condensed => Self::Condensed,
            FontStretch::SemiCondensed => Self::SemiCondensed,
            FontStretch::Normal => Self::Normal,
            FontStretch::SemiExpanded => Self::SemiExpanded,
            FontStretch::Expended => Self::Expanded,
            FontStretch::ExtraExpanded => Self::ExtraExpanded,
            FontStretch::UltraExpanded => Self::UltraExpanded,
        }
    }
}

// Some file not specify Type field, although according to PDF32000_2008.pdf Type field is required
#[pdf_object(Some("FontDescriptor"))]
pub trait FontDescriptorDictTrait {
    #[typ("Name")]
    fn font_name(&self) -> &'b str;

    fn font_family(&self) -> Option<&str>;

    #[try_from]
    fn font_stretch(&self) -> Option<FontStretch>;

    fn font_weight(&self) -> Option<u32>;

    #[try_from]
    fn flags(&self) -> FontDescriptorFlags;

    #[try_from]
    fn font_b_box(&self) -> Rectangle;

    fn italic_angle(&self) -> f32;

    fn ascent(&self) -> f32;

    fn descent(&self) -> f32;

    #[or_default]
    fn leading(&self) -> f32;

    fn cap_height(&self) -> Option<f32>;

    #[or_default]
    fn x_height(&self) -> f32;

    fn stem_v(&self) -> f32;

    #[or_default]
    fn stem_h(&self) -> f32;

    #[or_default]
    fn avg_width(&self) -> f32;

    #[or_default]
    fn max_width(&self) -> f32;

    #[or_default]
    fn missing_width(&self) -> u32;

    fn font_file(&self) -> Option<&'b Stream<'a>>;

    fn font_file2(&self) -> Option<&'b Stream<'a>>;

    fn font_file3(&self) -> Option<&'b Stream<'a>>;

    fn char_set(&self) -> Option<&str>;
}

bitflags! {
    #[derive(TryFromIntObjectForBitflags, PartialEq, Copy, Clone)]
    pub struct FontDescriptorFlags: u32 {
        const FIXED_PITCH = 1;
        const SERIF = 1 << 1;
        const SYMBOLIC = 1 << 2;
        const SCRIPT = 1 << 3;
        const NONSYMBOLIC = 1 << 5;
        const ITALIC = 1 << 6;
        const ALL_CAP = 1 << 16;
        const SMALL_CAP = 1 << 17;
        const FORCE_BOLD = 1 << 18;
    }
}

/// Map to pdf Encoding object Differences field. Override character code
/// to glyph names from BaseEncoding.
pub struct EncodingDifferences<'a>(HashMap<u8, &'a str>);

/// Parse Differences field in Encoding object, which is an array of
/// character code and one or several glyph names. First name is mapped
/// to character code, second name is mapped to character code + 1, and so on.
impl<'a, 'b> TryFrom<&'b Object<'a>> for EncodingDifferences<'b> {
    type Error = ObjectValueError;

    fn try_from(obj: &'b Object<'a>) -> Result<Self, Self::Error> {
        let mut map = HashMap::new();
        let Object::Array(arr) = obj else {
            return Err(Self::Error::UnexpectedType);
        };

        let mut iter = arr.iter();
        let Some(o) = iter.next() else {
            return Ok(EncodingDifferences(map));
        };

        let mut code = o.as_int()?;
        for o in iter {
            match o {
                Object::Name(name) => {
                    map.insert(code as u8, name.as_ref());
                    code += 1;
                }
                Object::Integer(num) => {
                    code = *num;
                }
                _ => return Err(Self::Error::UnexpectedType),
            };
        }
        Ok(EncodingDifferences(map))
    }
}

/// Encoding object for Non Type0 and Type3 fonts
#[pdf_object(Some("Encoding"))]
pub trait EncodingDictTrait {
    #[typ("Name")]
    fn base_encoding(&self) -> Option<&str>;

    #[try_from]
    fn differences(&self) -> Option<EncodingDifferences<'b>>;
}

/// Encoding for Type1 and other font types except Type0, which allows
/// char code larger than u8.
/// map char code (u8) to glyph name
#[derive(Debug)]
pub struct Encoding256<'a>([Cow<'a, str>; 256]);

impl<'a> Encoding256<'a> {
    pub fn borrowed(encodings: [&'a str; 256]) -> Self {
        Self(
            encodings
                .iter()
                .map(|s| Cow::Borrowed(*s))
                .collect::<Vec<_>>()
                .try_into()
                .unwrap(),
        )
    }

    pub fn owned(encodings: [String; 256]) -> Self {
        Self(
            encodings
                .iter()
                .map(|s| Cow::Owned(s.clone()))
                .collect::<Vec<_>>()
                .try_into()
                .unwrap(),
        )
    }

    pub fn decode(&self, ch: u8) -> &str {
        self.0[ch as usize].as_ref()
    }

    pub fn apply_differences(self, diff: &EncodingDifferences<'a>) -> Self {
        let mut new = self.0;
        for (ch, name) in diff.0.iter() {
            new[*ch as usize] = Cow::Borrowed(name);
        }
        Self(new)
    }
}

impl Encoding256<'static> {
    pub fn predefined(name: &str) -> Option<Self> {
        match name {
            "MacRomanEncoding" => Some(Self::MAC_ROMAN),
            "MacExpertEncoding" => Some(Self::MAC_EXPERT),
            "WinAnsiEncoding" => Some(Self::WIN_ANSI),
            "StandardEncoding" => Some(Self::STANDARD),
            "Symbol" => Some(Self::SYMBOL),
            "ZapfDingbats" => Some(Self::ZAPFDINGBATS),
            _ => None,
        }
    }

    pub const STANDARD: Self = Self([
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("space"),
        Cow::Borrowed("exclam"),
        Cow::Borrowed("quotedbl"),
        Cow::Borrowed("numbersign"),
        Cow::Borrowed("dollar"),
        Cow::Borrowed("percent"),
        Cow::Borrowed("ampersand"),
        Cow::Borrowed("quotesingle"),
        Cow::Borrowed("parenleft"),
        Cow::Borrowed("parenright"),
        Cow::Borrowed("asterisk"),
        Cow::Borrowed("plus"),
        Cow::Borrowed("comma"),
        Cow::Borrowed("hyphen"),
        Cow::Borrowed("period"),
        Cow::Borrowed("slash"),
        Cow::Borrowed("zero"),
        Cow::Borrowed("one"),
        Cow::Borrowed("two"),
        Cow::Borrowed("three"),
        Cow::Borrowed("four"),
        Cow::Borrowed("five"),
        Cow::Borrowed("six"),
        Cow::Borrowed("seven"),
        Cow::Borrowed("eight"),
        Cow::Borrowed("nine"),
        Cow::Borrowed("colon"),
        Cow::Borrowed("semicolon"),
        Cow::Borrowed("less"),
        Cow::Borrowed("equal"),
        Cow::Borrowed("greater"),
        Cow::Borrowed("question"),
        Cow::Borrowed("at"),
        Cow::Borrowed("A"),
        Cow::Borrowed("B"),
        Cow::Borrowed("C"),
        Cow::Borrowed("D"),
        Cow::Borrowed("E"),
        Cow::Borrowed("F"),
        Cow::Borrowed("G"),
        Cow::Borrowed("H"),
        Cow::Borrowed("I"),
        Cow::Borrowed("J"),
        Cow::Borrowed("K"),
        Cow::Borrowed("L"),
        Cow::Borrowed("M"),
        Cow::Borrowed("N"),
        Cow::Borrowed("O"),
        Cow::Borrowed("P"),
        Cow::Borrowed("Q"),
        Cow::Borrowed("R"),
        Cow::Borrowed("S"),
        Cow::Borrowed("T"),
        Cow::Borrowed("U"),
        Cow::Borrowed("V"),
        Cow::Borrowed("W"),
        Cow::Borrowed("X"),
        Cow::Borrowed("Y"),
        Cow::Borrowed("Z"),
        Cow::Borrowed("bracketleft"),
        Cow::Borrowed("backslash"),
        Cow::Borrowed("bracketright"),
        Cow::Borrowed("asciicircum"),
        Cow::Borrowed("underscore"),
        Cow::Borrowed("grave"),
        Cow::Borrowed("a"),
        Cow::Borrowed("b"),
        Cow::Borrowed("c"),
        Cow::Borrowed("d"),
        Cow::Borrowed("e"),
        Cow::Borrowed("f"),
        Cow::Borrowed("g"),
        Cow::Borrowed("h"),
        Cow::Borrowed("i"),
        Cow::Borrowed("j"),
        Cow::Borrowed("k"),
        Cow::Borrowed("l"),
        Cow::Borrowed("m"),
        Cow::Borrowed("n"),
        Cow::Borrowed("o"),
        Cow::Borrowed("p"),
        Cow::Borrowed("q"),
        Cow::Borrowed("r"),
        Cow::Borrowed("s"),
        Cow::Borrowed("t"),
        Cow::Borrowed("u"),
        Cow::Borrowed("v"),
        Cow::Borrowed("w"),
        Cow::Borrowed("x"),
        Cow::Borrowed("y"),
        Cow::Borrowed("z"),
        Cow::Borrowed("braceleft"),
        Cow::Borrowed("bar"),
        Cow::Borrowed("braceright"),
        Cow::Borrowed("asciitilde"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("Euro"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("quotesinglbase"),
        Cow::Borrowed("florin"),
        Cow::Borrowed("quotedblbase"),
        Cow::Borrowed("ellipsis"),
        Cow::Borrowed("dagger"),
        Cow::Borrowed("daggerdbl"),
        Cow::Borrowed("circumflex"),
        Cow::Borrowed("perthousand"),
        Cow::Borrowed("Scaron"),
        Cow::Borrowed("guilsinglleft"),
        Cow::Borrowed("OE"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("Zcaron"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("quoteleft"),
        Cow::Borrowed("quoteright"),
        Cow::Borrowed("quotedblleft"),
        Cow::Borrowed("quotedblright"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("endash"),
        Cow::Borrowed("emdash"),
        Cow::Borrowed("tilde"),
        Cow::Borrowed("trademark"),
        Cow::Borrowed("scaron"),
        Cow::Borrowed("guilsinglright"),
        Cow::Borrowed("oe"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("zcaron"),
        Cow::Borrowed("Ydieresis"),
        Cow::Borrowed("space"),
        Cow::Borrowed("exclamdown"),
        Cow::Borrowed("cent"),
        Cow::Borrowed("sterling"),
        Cow::Borrowed("currency"),
        Cow::Borrowed("yen"),
        Cow::Borrowed("brokenbar"),
        Cow::Borrowed("section"),
        Cow::Borrowed("dieresis"),
        Cow::Borrowed("copyright"),
        Cow::Borrowed("ordfeminine"),
        Cow::Borrowed("guillemotleft"),
        Cow::Borrowed("logicalnot"),
        Cow::Borrowed("hyphen"),
        Cow::Borrowed("registered"),
        Cow::Borrowed("macron"),
        Cow::Borrowed("degree"),
        Cow::Borrowed("plusminus"),
        Cow::Borrowed("twosuperior"),
        Cow::Borrowed("threesuperior"),
        Cow::Borrowed("acute"),
        Cow::Borrowed("mu"),
        Cow::Borrowed("paragraph"),
        Cow::Borrowed("periodcentered"),
        Cow::Borrowed("cedilla"),
        Cow::Borrowed("onesuperior"),
        Cow::Borrowed("ordmasculine"),
        Cow::Borrowed("guillemotright"),
        Cow::Borrowed("onequarter"),
        Cow::Borrowed("onehalf"),
        Cow::Borrowed("threequarters"),
        Cow::Borrowed("questiondown"),
        Cow::Borrowed("Agrave"),
        Cow::Borrowed("Aacute"),
        Cow::Borrowed("Acircumflex"),
        Cow::Borrowed("Atilde"),
        Cow::Borrowed("Adieresis"),
        Cow::Borrowed("Aring"),
        Cow::Borrowed("AE"),
        Cow::Borrowed("Ccedilla"),
        Cow::Borrowed("Egrave"),
        Cow::Borrowed("Eacute"),
        Cow::Borrowed("Ecircumflex"),
        Cow::Borrowed("Edieresis"),
        Cow::Borrowed("Igrave"),
        Cow::Borrowed("Iacute"),
        Cow::Borrowed("Icircumflex"),
        Cow::Borrowed("Idieresis"),
        Cow::Borrowed("Eth"),
        Cow::Borrowed("Ntilde"),
        Cow::Borrowed("Ograve"),
        Cow::Borrowed("Oacute"),
        Cow::Borrowed("Ocircumflex"),
        Cow::Borrowed("Otilde"),
        Cow::Borrowed("Odieresis"),
        Cow::Borrowed("multiply"),
        Cow::Borrowed("Oslash"),
        Cow::Borrowed("Ugrave"),
        Cow::Borrowed("Uacute"),
        Cow::Borrowed("Ucircumflex"),
        Cow::Borrowed("Udieresis"),
        Cow::Borrowed("Yacute"),
        Cow::Borrowed("Thorn"),
        Cow::Borrowed("germandbls"),
        Cow::Borrowed("agrave"),
        Cow::Borrowed("aacute"),
        Cow::Borrowed("acircumflex"),
        Cow::Borrowed("atilde"),
        Cow::Borrowed("adieresis"),
        Cow::Borrowed("aring"),
        Cow::Borrowed("ae"),
        Cow::Borrowed("ccedilla"),
        Cow::Borrowed("egrave"),
        Cow::Borrowed("eacute"),
        Cow::Borrowed("ecircumflex"),
        Cow::Borrowed("edieresis"),
        Cow::Borrowed("igrave"),
        Cow::Borrowed("iacute"),
        Cow::Borrowed("icircumflex"),
        Cow::Borrowed("idieresis"),
        Cow::Borrowed("eth"),
        Cow::Borrowed("ntilde"),
        Cow::Borrowed("ograve"),
        Cow::Borrowed("oacute"),
        Cow::Borrowed("ocircumflex"),
        Cow::Borrowed("otilde"),
        Cow::Borrowed("odieresis"),
        Cow::Borrowed("divide"),
        Cow::Borrowed("oslash"),
        Cow::Borrowed("ugrave"),
        Cow::Borrowed("uacute"),
        Cow::Borrowed("ucircumflex"),
        Cow::Borrowed("udieresis"),
        Cow::Borrowed("yacute"),
        Cow::Borrowed("thorn"),
        Cow::Borrowed("ydieresis"),
    ]);

    pub const MAC_ROMAN: Self = Self([
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("space"),
        Cow::Borrowed("exclam"),
        Cow::Borrowed("quotedbl"),
        Cow::Borrowed("numbersign"),
        Cow::Borrowed("dollar"),
        Cow::Borrowed("percent"),
        Cow::Borrowed("ampersand"),
        Cow::Borrowed("quotesingle"),
        Cow::Borrowed("parenleft"),
        Cow::Borrowed("parenright"),
        Cow::Borrowed("asterisk"),
        Cow::Borrowed("plus"),
        Cow::Borrowed("comma"),
        Cow::Borrowed("hyphen"),
        Cow::Borrowed("period"),
        Cow::Borrowed("slash"),
        Cow::Borrowed("zero"),
        Cow::Borrowed("one"),
        Cow::Borrowed("two"),
        Cow::Borrowed("three"),
        Cow::Borrowed("four"),
        Cow::Borrowed("five"),
        Cow::Borrowed("six"),
        Cow::Borrowed("seven"),
        Cow::Borrowed("eight"),
        Cow::Borrowed("nine"),
        Cow::Borrowed("colon"),
        Cow::Borrowed("semicolon"),
        Cow::Borrowed("less"),
        Cow::Borrowed("equal"),
        Cow::Borrowed("greater"),
        Cow::Borrowed("question"),
        Cow::Borrowed("at"),
        Cow::Borrowed("A"),
        Cow::Borrowed("B"),
        Cow::Borrowed("C"),
        Cow::Borrowed("D"),
        Cow::Borrowed("E"),
        Cow::Borrowed("F"),
        Cow::Borrowed("G"),
        Cow::Borrowed("H"),
        Cow::Borrowed("I"),
        Cow::Borrowed("J"),
        Cow::Borrowed("K"),
        Cow::Borrowed("L"),
        Cow::Borrowed("M"),
        Cow::Borrowed("N"),
        Cow::Borrowed("O"),
        Cow::Borrowed("P"),
        Cow::Borrowed("Q"),
        Cow::Borrowed("R"),
        Cow::Borrowed("S"),
        Cow::Borrowed("T"),
        Cow::Borrowed("U"),
        Cow::Borrowed("V"),
        Cow::Borrowed("W"),
        Cow::Borrowed("X"),
        Cow::Borrowed("Y"),
        Cow::Borrowed("Z"),
        Cow::Borrowed("bracketleft"),
        Cow::Borrowed("backslash"),
        Cow::Borrowed("bracketright"),
        Cow::Borrowed("asciicircum"),
        Cow::Borrowed("underscore"),
        Cow::Borrowed("grave"),
        Cow::Borrowed("a"),
        Cow::Borrowed("b"),
        Cow::Borrowed("c"),
        Cow::Borrowed("d"),
        Cow::Borrowed("e"),
        Cow::Borrowed("f"),
        Cow::Borrowed("g"),
        Cow::Borrowed("h"),
        Cow::Borrowed("i"),
        Cow::Borrowed("j"),
        Cow::Borrowed("k"),
        Cow::Borrowed("l"),
        Cow::Borrowed("m"),
        Cow::Borrowed("n"),
        Cow::Borrowed("o"),
        Cow::Borrowed("p"),
        Cow::Borrowed("q"),
        Cow::Borrowed("r"),
        Cow::Borrowed("s"),
        Cow::Borrowed("t"),
        Cow::Borrowed("u"),
        Cow::Borrowed("v"),
        Cow::Borrowed("w"),
        Cow::Borrowed("x"),
        Cow::Borrowed("y"),
        Cow::Borrowed("z"),
        Cow::Borrowed("braceleft"),
        Cow::Borrowed("bar"),
        Cow::Borrowed("braceright"),
        Cow::Borrowed("asciitilde"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("Adieresis"),
        Cow::Borrowed("Aring"),
        Cow::Borrowed("Ccedilla"),
        Cow::Borrowed("Eacute"),
        Cow::Borrowed("Ntilde"),
        Cow::Borrowed("Odieresis"),
        Cow::Borrowed("Udieresis"),
        Cow::Borrowed("aacute"),
        Cow::Borrowed("agrave"),
        Cow::Borrowed("acircumflex"),
        Cow::Borrowed("adieresis"),
        Cow::Borrowed("atilde"),
        Cow::Borrowed("aring"),
        Cow::Borrowed("ccedilla"),
        Cow::Borrowed("eacute"),
        Cow::Borrowed("egrave"),
        Cow::Borrowed("ecircumflex"),
        Cow::Borrowed("edieresis"),
        Cow::Borrowed("iacute"),
        Cow::Borrowed("igrave"),
        Cow::Borrowed("icircumflex"),
        Cow::Borrowed("idieresis"),
        Cow::Borrowed("ntilde"),
        Cow::Borrowed("oacute"),
        Cow::Borrowed("ograve"),
        Cow::Borrowed("ocircumflex"),
        Cow::Borrowed("odieresis"),
        Cow::Borrowed("otilde"),
        Cow::Borrowed("uacute"),
        Cow::Borrowed("ugrave"),
        Cow::Borrowed("ucircumflex"),
        Cow::Borrowed("udieresis"),
        Cow::Borrowed("dagger"),
        Cow::Borrowed("degree"),
        Cow::Borrowed("cent"),
        Cow::Borrowed("sterling"),
        Cow::Borrowed("section"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("paragraph"),
        Cow::Borrowed("germandbls"),
        Cow::Borrowed("registered"),
        Cow::Borrowed("copyright"),
        Cow::Borrowed("trademark"),
        Cow::Borrowed("acute"),
        Cow::Borrowed("dieresis"),
        Cow::Borrowed("notequal"),
        Cow::Borrowed("AE"),
        Cow::Borrowed("Oslash"),
        Cow::Borrowed("infinity"),
        Cow::Borrowed("plusminus"),
        Cow::Borrowed("lessequal"),
        Cow::Borrowed("greaterequal"),
        Cow::Borrowed("yen"),
        Cow::Borrowed("mu"),
        Cow::Borrowed("partialdiff"),
        Cow::Borrowed("summation"),
        Cow::Borrowed("product"),
        Cow::Borrowed("pi"),
        Cow::Borrowed("integral"),
        Cow::Borrowed("ordfeminine"),
        Cow::Borrowed("ordmasculine"),
        Cow::Borrowed("Omega"),
        Cow::Borrowed("ae"),
        Cow::Borrowed("oslash"),
        Cow::Borrowed("questiondown"),
        Cow::Borrowed("exclamdown"),
        Cow::Borrowed("logicalnot"),
        Cow::Borrowed("radical"),
        Cow::Borrowed("florin"),
        Cow::Borrowed("approxequal"),
        Cow::Borrowed("Delta"),
        Cow::Borrowed("guillemotleft"),
        Cow::Borrowed("guillemotright"),
        Cow::Borrowed("ellipsis"),
        Cow::Borrowed("space"),
        Cow::Borrowed("Agrave"),
        Cow::Borrowed("Atilde"),
        Cow::Borrowed("Otilde"),
        Cow::Borrowed("OE"),
        Cow::Borrowed("oe"),
        Cow::Borrowed("endash"),
        Cow::Borrowed("emdash"),
        Cow::Borrowed("quotedblleft"),
        Cow::Borrowed("quotedblright"),
        Cow::Borrowed("quoteleft"),
        Cow::Borrowed("quoteright"),
        Cow::Borrowed("divide"),
        Cow::Borrowed("lozenge"),
        Cow::Borrowed("ydieresis"),
        Cow::Borrowed("Ydieresis"),
        Cow::Borrowed("fraction"),
        Cow::Borrowed("currency"),
        Cow::Borrowed("guilsinglleft"),
        Cow::Borrowed("guilsinglright"),
        Cow::Borrowed("fi"),
        Cow::Borrowed("fl"),
        Cow::Borrowed("daggerdbl"),
        Cow::Borrowed("periodcentered"),
        Cow::Borrowed("quotesinglbase"),
        Cow::Borrowed("quotedblbase"),
        Cow::Borrowed("perthousand"),
        Cow::Borrowed("Acircumflex"),
        Cow::Borrowed("Ecircumflex"),
        Cow::Borrowed("Aacute"),
        Cow::Borrowed("Edieresis"),
        Cow::Borrowed("Egrave"),
        Cow::Borrowed("Iacute"),
        Cow::Borrowed("Icircumflex"),
        Cow::Borrowed("Idieresis"),
        Cow::Borrowed("Igrave"),
        Cow::Borrowed("Oacute"),
        Cow::Borrowed("Ocircumflex"),
        Cow::Borrowed("apple"),
        Cow::Borrowed("Ograve"),
        Cow::Borrowed("Uacute"),
        Cow::Borrowed("Ucircumflex"),
        Cow::Borrowed("Ugrave"),
        Cow::Borrowed("dotlessi"),
        Cow::Borrowed("circumflex"),
        Cow::Borrowed("tilde"),
        Cow::Borrowed("macron"),
        Cow::Borrowed("breve"),
        Cow::Borrowed("dotaccent"),
        Cow::Borrowed("ring"),
        Cow::Borrowed("cedilla"),
        Cow::Borrowed("hungarumlaut"),
        Cow::Borrowed("ogonek"),
        Cow::Borrowed("caron"),
    ]);

    pub const MAC_EXPERT: Self = Self([
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("space"),
        Cow::Borrowed("exclamsmall"),
        Cow::Borrowed("Hungarumlautsmall"),
        Cow::Borrowed("centoldstyle"),
        Cow::Borrowed("dollaroldstyle"),
        Cow::Borrowed("dollarsuperior"),
        Cow::Borrowed("ampersandsmall"),
        Cow::Borrowed("Acutesmall"),
        Cow::Borrowed("parenleftsuperior"),
        Cow::Borrowed("parenrightsuperior"),
        Cow::Borrowed("twodotenleader"),
        Cow::Borrowed("onedotenleader"),
        Cow::Borrowed("comma"),
        Cow::Borrowed("hyphen"),
        Cow::Borrowed("period"),
        Cow::Borrowed("fraction"),
        Cow::Borrowed("zerooldstyle"),
        Cow::Borrowed("oneoldstyle"),
        Cow::Borrowed("twooldstyle"),
        Cow::Borrowed("threeoldstyle"),
        Cow::Borrowed("fouroldstyle"),
        Cow::Borrowed("fiveoldstyle"),
        Cow::Borrowed("sixoldstyle"),
        Cow::Borrowed("sevenoldstyle"),
        Cow::Borrowed("eightoldstyle"),
        Cow::Borrowed("nineoldstyle"),
        Cow::Borrowed("colon"),
        Cow::Borrowed("semicolon"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("threequartersemdash"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("questionsmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("Ethsmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("onequarter"),
        Cow::Borrowed("onehalf"),
        Cow::Borrowed("threequarters"),
        Cow::Borrowed("oneeighth"),
        Cow::Borrowed("threeeighths"),
        Cow::Borrowed("fiveeighths"),
        Cow::Borrowed("seveneighths"),
        Cow::Borrowed("onethird"),
        Cow::Borrowed("twothirds"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("ff"),
        Cow::Borrowed("fi"),
        Cow::Borrowed("fl"),
        Cow::Borrowed("ffi"),
        Cow::Borrowed("ffl"),
        Cow::Borrowed("parenleftinferior"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("parenrightinferior"),
        Cow::Borrowed("Circumflexsmall"),
        Cow::Borrowed("hypheninferior"),
        Cow::Borrowed("Gravesmall"),
        Cow::Borrowed("Asmall"),
        Cow::Borrowed("Bsmall"),
        Cow::Borrowed("Csmall"),
        Cow::Borrowed("Dsmall"),
        Cow::Borrowed("Esmall"),
        Cow::Borrowed("Fsmall"),
        Cow::Borrowed("Gsmall"),
        Cow::Borrowed("Hsmall"),
        Cow::Borrowed("Ismall"),
        Cow::Borrowed("Jsmall"),
        Cow::Borrowed("Ksmall"),
        Cow::Borrowed("Lsmall"),
        Cow::Borrowed("Msmall"),
        Cow::Borrowed("Nsmall"),
        Cow::Borrowed("Osmall"),
        Cow::Borrowed("Psmall"),
        Cow::Borrowed("Qsmall"),
        Cow::Borrowed("Rsmall"),
        Cow::Borrowed("Ssmall"),
        Cow::Borrowed("Tsmall"),
        Cow::Borrowed("Usmall"),
        Cow::Borrowed("Vsmall"),
        Cow::Borrowed("Wsmall"),
        Cow::Borrowed("Xsmall"),
        Cow::Borrowed("Ysmall"),
        Cow::Borrowed("Zsmall"),
        Cow::Borrowed("colonmonetary"),
        Cow::Borrowed("onefitted"),
        Cow::Borrowed("rupiah"),
        Cow::Borrowed("Tildesmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("asuperior"),
        Cow::Borrowed("centsuperior"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("Aacutesmall"),
        Cow::Borrowed("Agravesmall"),
        Cow::Borrowed("Acircumflexsmall"),
        Cow::Borrowed("Adieresissmall"),
        Cow::Borrowed("Atildesmall"),
        Cow::Borrowed("Aringsmall"),
        Cow::Borrowed("Ccedillasmall"),
        Cow::Borrowed("Eacutesmall"),
        Cow::Borrowed("Egravesmall"),
        Cow::Borrowed("Ecircumflexsmall"),
        Cow::Borrowed("Edieresissmall"),
        Cow::Borrowed("Iacutesmall"),
        Cow::Borrowed("Igravesmall"),
        Cow::Borrowed("Icircumflexsmall"),
        Cow::Borrowed("Idieresissmall"),
        Cow::Borrowed("Ntildesmall"),
        Cow::Borrowed("Oacutesmall"),
        Cow::Borrowed("Ogravesmall"),
        Cow::Borrowed("Ocircumflexsmall"),
        Cow::Borrowed("Odieresissmall"),
        Cow::Borrowed("Otildesmall"),
        Cow::Borrowed("Uacutesmall"),
        Cow::Borrowed("Ugravesmall"),
        Cow::Borrowed("Ucircumflexsmall"),
        Cow::Borrowed("Udieresissmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("eightsuperior"),
        Cow::Borrowed("fourinferior"),
        Cow::Borrowed("threeinferior"),
        Cow::Borrowed("sixinferior"),
        Cow::Borrowed("eightinferior"),
        Cow::Borrowed("seveninferior"),
        Cow::Borrowed("Scaronsmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("centinferior"),
        Cow::Borrowed("twoinferior"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("Dieresissmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("Caronsmall"),
        Cow::Borrowed("osuperior"),
        Cow::Borrowed("fiveinferior"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("commainferior"),
        Cow::Borrowed("periodinferior"),
        Cow::Borrowed("Yacutesmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("dollarinferior"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("Thornsmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("nineinferior"),
        Cow::Borrowed("zeroinferior"),
        Cow::Borrowed("Zcaronsmall"),
        Cow::Borrowed("AEsmall"),
        Cow::Borrowed("Oslashsmall"),
        Cow::Borrowed("questiondownsmall"),
        Cow::Borrowed("oneinferior"),
        Cow::Borrowed("Lslashsmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("Cedillasmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("OEsmall"),
        Cow::Borrowed("figuredash"),
        Cow::Borrowed("hyphensuperior"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("exclamdownsmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("Ydieresissmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("onesuperior"),
        Cow::Borrowed("twosuperior"),
        Cow::Borrowed("threesuperior"),
        Cow::Borrowed("foursuperior"),
        Cow::Borrowed("fivesuperior"),
        Cow::Borrowed("sixsuperior"),
        Cow::Borrowed("sevensuperior"),
        Cow::Borrowed("ninesuperior"),
        Cow::Borrowed("zerosuperior"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("esuperior"),
        Cow::Borrowed("rsuperior"),
        Cow::Borrowed("tsuperior"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("isuperior"),
        Cow::Borrowed("ssuperior"),
        Cow::Borrowed("dsuperior"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("lsuperior"),
        Cow::Borrowed("Ogoneksmall"),
        Cow::Borrowed("Brevesmall"),
        Cow::Borrowed("Macronsmall"),
        Cow::Borrowed("bsuperior"),
        Cow::Borrowed("nsuperior"),
        Cow::Borrowed("msuperior"),
        Cow::Borrowed("commasuperior"),
        Cow::Borrowed("periodsuperior"),
        Cow::Borrowed("Dotaccentsmall"),
        Cow::Borrowed("Ringsmall"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
    ]);

    pub const WIN_ANSI: Self = Self([
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("space"),
        Cow::Borrowed("exclam"),
        Cow::Borrowed("quotedbl"),
        Cow::Borrowed("numbersign"),
        Cow::Borrowed("dollar"),
        Cow::Borrowed("percent"),
        Cow::Borrowed("ampersand"),
        Cow::Borrowed("quotesingle"),
        Cow::Borrowed("parenleft"),
        Cow::Borrowed("parenright"),
        Cow::Borrowed("asterisk"),
        Cow::Borrowed("plus"),
        Cow::Borrowed("comma"),
        Cow::Borrowed("hyphen"),
        Cow::Borrowed("period"),
        Cow::Borrowed("slash"),
        Cow::Borrowed("zero"),
        Cow::Borrowed("one"),
        Cow::Borrowed("two"),
        Cow::Borrowed("three"),
        Cow::Borrowed("four"),
        Cow::Borrowed("five"),
        Cow::Borrowed("six"),
        Cow::Borrowed("seven"),
        Cow::Borrowed("eight"),
        Cow::Borrowed("nine"),
        Cow::Borrowed("colon"),
        Cow::Borrowed("semicolon"),
        Cow::Borrowed("less"),
        Cow::Borrowed("equal"),
        Cow::Borrowed("greater"),
        Cow::Borrowed("question"),
        Cow::Borrowed("at"),
        Cow::Borrowed("A"),
        Cow::Borrowed("B"),
        Cow::Borrowed("C"),
        Cow::Borrowed("D"),
        Cow::Borrowed("E"),
        Cow::Borrowed("F"),
        Cow::Borrowed("G"),
        Cow::Borrowed("H"),
        Cow::Borrowed("I"),
        Cow::Borrowed("J"),
        Cow::Borrowed("K"),
        Cow::Borrowed("L"),
        Cow::Borrowed("M"),
        Cow::Borrowed("N"),
        Cow::Borrowed("O"),
        Cow::Borrowed("P"),
        Cow::Borrowed("Q"),
        Cow::Borrowed("R"),
        Cow::Borrowed("S"),
        Cow::Borrowed("T"),
        Cow::Borrowed("U"),
        Cow::Borrowed("V"),
        Cow::Borrowed("W"),
        Cow::Borrowed("X"),
        Cow::Borrowed("Y"),
        Cow::Borrowed("Z"),
        Cow::Borrowed("bracketleft"),
        Cow::Borrowed("backslash"),
        Cow::Borrowed("bracketright"),
        Cow::Borrowed("asciicircum"),
        Cow::Borrowed("underscore"),
        Cow::Borrowed("grave"),
        Cow::Borrowed("a"),
        Cow::Borrowed("b"),
        Cow::Borrowed("c"),
        Cow::Borrowed("d"),
        Cow::Borrowed("e"),
        Cow::Borrowed("f"),
        Cow::Borrowed("g"),
        Cow::Borrowed("h"),
        Cow::Borrowed("i"),
        Cow::Borrowed("j"),
        Cow::Borrowed("k"),
        Cow::Borrowed("l"),
        Cow::Borrowed("m"),
        Cow::Borrowed("n"),
        Cow::Borrowed("o"),
        Cow::Borrowed("p"),
        Cow::Borrowed("q"),
        Cow::Borrowed("r"),
        Cow::Borrowed("s"),
        Cow::Borrowed("t"),
        Cow::Borrowed("u"),
        Cow::Borrowed("v"),
        Cow::Borrowed("w"),
        Cow::Borrowed("x"),
        Cow::Borrowed("y"),
        Cow::Borrowed("z"),
        Cow::Borrowed("braceleft"),
        Cow::Borrowed("bar"),
        Cow::Borrowed("braceright"),
        Cow::Borrowed("asciitilde"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("Euro"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("quotesinglbase"),
        Cow::Borrowed("florin"),
        Cow::Borrowed("quotedblbase"),
        Cow::Borrowed("ellipsis"),
        Cow::Borrowed("dagger"),
        Cow::Borrowed("daggerdbl"),
        Cow::Borrowed("circumflex"),
        Cow::Borrowed("perthousand"),
        Cow::Borrowed("Scaron"),
        Cow::Borrowed("guilsinglleft"),
        Cow::Borrowed("OE"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("Zcaron"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("quoteleft"),
        Cow::Borrowed("quoteright"),
        Cow::Borrowed("quotedblleft"),
        Cow::Borrowed("quotedblright"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("endash"),
        Cow::Borrowed("emdash"),
        Cow::Borrowed("tilde"),
        Cow::Borrowed("trademark"),
        Cow::Borrowed("scaron"),
        Cow::Borrowed("guilsinglright"),
        Cow::Borrowed("oe"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("zcaron"),
        Cow::Borrowed("Ydieresis"),
        Cow::Borrowed("space"),
        Cow::Borrowed("exclamdown"),
        Cow::Borrowed("cent"),
        Cow::Borrowed("sterling"),
        Cow::Borrowed("currency"),
        Cow::Borrowed("yen"),
        Cow::Borrowed("brokenbar"),
        Cow::Borrowed("section"),
        Cow::Borrowed("dieresis"),
        Cow::Borrowed("copyright"),
        Cow::Borrowed("ordfeminine"),
        Cow::Borrowed("guillemotleft"),
        Cow::Borrowed("logicalnot"),
        Cow::Borrowed("hyphen"),
        Cow::Borrowed("registered"),
        Cow::Borrowed("macron"),
        Cow::Borrowed("degree"),
        Cow::Borrowed("plusminus"),
        Cow::Borrowed("twosuperior"),
        Cow::Borrowed("threesuperior"),
        Cow::Borrowed("acute"),
        Cow::Borrowed("mu"),
        Cow::Borrowed("paragraph"),
        Cow::Borrowed("periodcentered"),
        Cow::Borrowed("cedilla"),
        Cow::Borrowed("onesuperior"),
        Cow::Borrowed("ordmasculine"),
        Cow::Borrowed("guillemotright"),
        Cow::Borrowed("onequarter"),
        Cow::Borrowed("onehalf"),
        Cow::Borrowed("threequarters"),
        Cow::Borrowed("questiondown"),
        Cow::Borrowed("Agrave"),
        Cow::Borrowed("Aacute"),
        Cow::Borrowed("Acircumflex"),
        Cow::Borrowed("Atilde"),
        Cow::Borrowed("Adieresis"),
        Cow::Borrowed("Aring"),
        Cow::Borrowed("AE"),
        Cow::Borrowed("Ccedilla"),
        Cow::Borrowed("Egrave"),
        Cow::Borrowed("Eacute"),
        Cow::Borrowed("Ecircumflex"),
        Cow::Borrowed("Edieresis"),
        Cow::Borrowed("Igrave"),
        Cow::Borrowed("Iacute"),
        Cow::Borrowed("Icircumflex"),
        Cow::Borrowed("Idieresis"),
        Cow::Borrowed("Eth"),
        Cow::Borrowed("Ntilde"),
        Cow::Borrowed("Ograve"),
        Cow::Borrowed("Oacute"),
        Cow::Borrowed("Ocircumflex"),
        Cow::Borrowed("Otilde"),
        Cow::Borrowed("Odieresis"),
        Cow::Borrowed("multiply"),
        Cow::Borrowed("Oslash"),
        Cow::Borrowed("Ugrave"),
        Cow::Borrowed("Uacute"),
        Cow::Borrowed("Ucircumflex"),
        Cow::Borrowed("Udieresis"),
        Cow::Borrowed("Yacute"),
        Cow::Borrowed("Thorn"),
        Cow::Borrowed("germandbls"),
        Cow::Borrowed("agrave"),
        Cow::Borrowed("aacute"),
        Cow::Borrowed("acircumflex"),
        Cow::Borrowed("atilde"),
        Cow::Borrowed("adieresis"),
        Cow::Borrowed("aring"),
        Cow::Borrowed("ae"),
        Cow::Borrowed("ccedilla"),
        Cow::Borrowed("egrave"),
        Cow::Borrowed("eacute"),
        Cow::Borrowed("ecircumflex"),
        Cow::Borrowed("edieresis"),
        Cow::Borrowed("igrave"),
        Cow::Borrowed("iacute"),
        Cow::Borrowed("icircumflex"),
        Cow::Borrowed("idieresis"),
        Cow::Borrowed("eth"),
        Cow::Borrowed("ntilde"),
        Cow::Borrowed("ograve"),
        Cow::Borrowed("oacute"),
        Cow::Borrowed("ocircumflex"),
        Cow::Borrowed("otilde"),
        Cow::Borrowed("odieresis"),
        Cow::Borrowed("divide"),
        Cow::Borrowed("oslash"),
        Cow::Borrowed("ugrave"),
        Cow::Borrowed("uacute"),
        Cow::Borrowed("ucircumflex"),
        Cow::Borrowed("udieresis"),
        Cow::Borrowed("yacute"),
        Cow::Borrowed("thorn"),
        Cow::Borrowed("ydieresis"),
    ]);

    pub const SYMBOL: Self = Self([
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("space"),
        Cow::Borrowed("exclam"),
        Cow::Borrowed("universal"),
        Cow::Borrowed("numbersign"),
        Cow::Borrowed("existential"),
        Cow::Borrowed("percent"),
        Cow::Borrowed("ampersand"),
        Cow::Borrowed("suchthat"),
        Cow::Borrowed("parenleft"),
        Cow::Borrowed("parenright"),
        Cow::Borrowed("asteriskmath"),
        Cow::Borrowed("plus"),
        Cow::Borrowed("comma"),
        Cow::Borrowed("minus"),
        Cow::Borrowed("period"),
        Cow::Borrowed("slash"),
        Cow::Borrowed("zero"),
        Cow::Borrowed("one"),
        Cow::Borrowed("two"),
        Cow::Borrowed("three"),
        Cow::Borrowed("four"),
        Cow::Borrowed("five"),
        Cow::Borrowed("six"),
        Cow::Borrowed("seven"),
        Cow::Borrowed("eight"),
        Cow::Borrowed("nine"),
        Cow::Borrowed("colon"),
        Cow::Borrowed("semicolon"),
        Cow::Borrowed("less"),
        Cow::Borrowed("equal"),
        Cow::Borrowed("greater"),
        Cow::Borrowed("question"),
        Cow::Borrowed("congruent"),
        Cow::Borrowed("Alpha"),
        Cow::Borrowed("Beta"),
        Cow::Borrowed("Chi"),
        Cow::Borrowed("Delta"),
        Cow::Borrowed("Epsilon"),
        Cow::Borrowed("Phi"),
        Cow::Borrowed("Gamma"),
        Cow::Borrowed("Eta"),
        Cow::Borrowed("Iota"),
        Cow::Borrowed("theta1"),
        Cow::Borrowed("Kappa"),
        Cow::Borrowed("Lambda"),
        Cow::Borrowed("Mu"),
        Cow::Borrowed("Nu"),
        Cow::Borrowed("Omicron"),
        Cow::Borrowed("Pi"),
        Cow::Borrowed("Theta"),
        Cow::Borrowed("Rho"),
        Cow::Borrowed("Sigma"),
        Cow::Borrowed("Tau"),
        Cow::Borrowed("Upsilon"),
        Cow::Borrowed("sigma1"),
        Cow::Borrowed("Omega"),
        Cow::Borrowed("Xi"),
        Cow::Borrowed("Psi"),
        Cow::Borrowed("Zeta"),
        Cow::Borrowed("bracketleft"),
        Cow::Borrowed("therefore"),
        Cow::Borrowed("bracketright"),
        Cow::Borrowed("perpendicular"),
        Cow::Borrowed("underscore"),
        Cow::Borrowed("radicalex"),
        Cow::Borrowed("alpha"),
        Cow::Borrowed("beta"),
        Cow::Borrowed("chi"),
        Cow::Borrowed("delta"),
        Cow::Borrowed("epsilon"),
        Cow::Borrowed("phi"),
        Cow::Borrowed("gamma"),
        Cow::Borrowed("eta"),
        Cow::Borrowed("iota"),
        Cow::Borrowed("phi1"),
        Cow::Borrowed("kappa"),
        Cow::Borrowed("lambda"),
        Cow::Borrowed("mu"),
        Cow::Borrowed("nu"),
        Cow::Borrowed("omicron"),
        Cow::Borrowed("pi"),
        Cow::Borrowed("theta"),
        Cow::Borrowed("rho"),
        Cow::Borrowed("sigma"),
        Cow::Borrowed("tau"),
        Cow::Borrowed("upsilon"),
        Cow::Borrowed("omega1"),
        Cow::Borrowed("omega"),
        Cow::Borrowed("xi"),
        Cow::Borrowed("psi"),
        Cow::Borrowed("zeta"),
        Cow::Borrowed("braceleft"),
        Cow::Borrowed("bar"),
        Cow::Borrowed("braceright"),
        Cow::Borrowed("similar"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("Upsilon1"),
        Cow::Borrowed("minute"),
        Cow::Borrowed("lessequal"),
        Cow::Borrowed("fraction"),
        Cow::Borrowed("infinity"),
        Cow::Borrowed("florin"),
        Cow::Borrowed("club"),
        Cow::Borrowed("diamond"),
        Cow::Borrowed("heart"),
        Cow::Borrowed("spade"),
        Cow::Borrowed("arrowboth"),
        Cow::Borrowed("arrowleft"),
        Cow::Borrowed("arrowup"),
        Cow::Borrowed("arrowright"),
        Cow::Borrowed("arrowdown"),
        Cow::Borrowed("degree"),
        Cow::Borrowed("plusminus"),
        Cow::Borrowed("second"),
        Cow::Borrowed("greaterequal"),
        Cow::Borrowed("multiply"),
        Cow::Borrowed("proportional"),
        Cow::Borrowed("partialdiff"),
        Cow::Borrowed("bullet"),
        Cow::Borrowed("divide"),
        Cow::Borrowed("notequal"),
        Cow::Borrowed("equivalence"),
        Cow::Borrowed("approxequal"),
        Cow::Borrowed("ellipsis"),
        Cow::Borrowed("arrowvertex"),
        Cow::Borrowed("arrowhorizex"),
        Cow::Borrowed("carriagereturn"),
        Cow::Borrowed("aleph"),
        Cow::Borrowed("Ifraktur"),
        Cow::Borrowed("Rfraktur"),
        Cow::Borrowed("weierstrass"),
        Cow::Borrowed("circlemultiply"),
        Cow::Borrowed("circleplus"),
        Cow::Borrowed("emptyset"),
        Cow::Borrowed("intersection"),
        Cow::Borrowed("union"),
        Cow::Borrowed("propersuperset"),
        Cow::Borrowed("reflexsuperset"),
        Cow::Borrowed("notsubset"),
        Cow::Borrowed("propersubset"),
        Cow::Borrowed("reflexsubset"),
        Cow::Borrowed("element"),
        Cow::Borrowed("notelement"),
        Cow::Borrowed("angle"),
        Cow::Borrowed("gradient"),
        Cow::Borrowed("registerserif"),
        Cow::Borrowed("copyrightserif"),
        Cow::Borrowed("trademarkserif"),
        Cow::Borrowed("product"),
        Cow::Borrowed("radical"),
        Cow::Borrowed("dotmath"),
        Cow::Borrowed("logicalnot"),
        Cow::Borrowed("logicaland"),
        Cow::Borrowed("logicalor"),
        Cow::Borrowed("arrowdblboth"),
        Cow::Borrowed("arrowdblleft"),
        Cow::Borrowed("arrowdblup"),
        Cow::Borrowed("arrowdblright"),
        Cow::Borrowed("arrowdbldown"),
        Cow::Borrowed("lozenge"),
        Cow::Borrowed("angleleft"),
        Cow::Borrowed("registersans"),
        Cow::Borrowed("copyrightsans"),
        Cow::Borrowed("trademarksans"),
        Cow::Borrowed("summation"),
        Cow::Borrowed("parenlefttp"),
        Cow::Borrowed("parenleftex"),
        Cow::Borrowed("parenleftbt"),
        Cow::Borrowed("bracketlefttp"),
        Cow::Borrowed("bracketleftex"),
        Cow::Borrowed("bracketleftbt"),
        Cow::Borrowed("bracelefttp"),
        Cow::Borrowed("braceleftmid"),
        Cow::Borrowed("braceleftbt"),
        Cow::Borrowed("braceex"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("angleright"),
        Cow::Borrowed("integral"),
        Cow::Borrowed("integraltp"),
        Cow::Borrowed("integralex"),
        Cow::Borrowed("integralbt"),
        Cow::Borrowed("parenrighttp"),
        Cow::Borrowed("parenrightex"),
        Cow::Borrowed("parenrightbt"),
        Cow::Borrowed("bracketrighttp"),
        Cow::Borrowed("bracketrightex"),
        Cow::Borrowed("bracketrightbt"),
        Cow::Borrowed("bracerighttp"),
        Cow::Borrowed("bracerightmid"),
        Cow::Borrowed("bracerightbt"),
        Cow::Borrowed(NOTDEF),
    ]);

    pub const ZAPFDINGBATS: Self = Self([
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("space"),
        Cow::Borrowed("a1"),
        Cow::Borrowed("a2"),
        Cow::Borrowed("a202"),
        Cow::Borrowed("a3"),
        Cow::Borrowed("a4"),
        Cow::Borrowed("a5"),
        Cow::Borrowed("a119"),
        Cow::Borrowed("a118"),
        Cow::Borrowed("a117"),
        Cow::Borrowed("a11"),
        Cow::Borrowed("a12"),
        Cow::Borrowed("a13"),
        Cow::Borrowed("a14"),
        Cow::Borrowed("a15"),
        Cow::Borrowed("a16"),
        Cow::Borrowed("a105"),
        Cow::Borrowed("a17"),
        Cow::Borrowed("a18"),
        Cow::Borrowed("a19"),
        Cow::Borrowed("a20"),
        Cow::Borrowed("a21"),
        Cow::Borrowed("a22"),
        Cow::Borrowed("a23"),
        Cow::Borrowed("a24"),
        Cow::Borrowed("a25"),
        Cow::Borrowed("a26"),
        Cow::Borrowed("a27"),
        Cow::Borrowed("a28"),
        Cow::Borrowed("a6"),
        Cow::Borrowed("a7"),
        Cow::Borrowed("a8"),
        Cow::Borrowed("a9"),
        Cow::Borrowed("a10"),
        Cow::Borrowed("a29"),
        Cow::Borrowed("a30"),
        Cow::Borrowed("a31"),
        Cow::Borrowed("a32"),
        Cow::Borrowed("a33"),
        Cow::Borrowed("a34"),
        Cow::Borrowed("a35"),
        Cow::Borrowed("a36"),
        Cow::Borrowed("a37"),
        Cow::Borrowed("a38"),
        Cow::Borrowed("a39"),
        Cow::Borrowed("a40"),
        Cow::Borrowed("a41"),
        Cow::Borrowed("a42"),
        Cow::Borrowed("a43"),
        Cow::Borrowed("a44"),
        Cow::Borrowed("a45"),
        Cow::Borrowed("a46"),
        Cow::Borrowed("a47"),
        Cow::Borrowed("a48"),
        Cow::Borrowed("a49"),
        Cow::Borrowed("a50"),
        Cow::Borrowed("a51"),
        Cow::Borrowed("a52"),
        Cow::Borrowed("a53"),
        Cow::Borrowed("a54"),
        Cow::Borrowed("a55"),
        Cow::Borrowed("a56"),
        Cow::Borrowed("a57"),
        Cow::Borrowed("a58"),
        Cow::Borrowed("a59"),
        Cow::Borrowed("a60"),
        Cow::Borrowed("a61"),
        Cow::Borrowed("a62"),
        Cow::Borrowed("a63"),
        Cow::Borrowed("a64"),
        Cow::Borrowed("a65"),
        Cow::Borrowed("a66"),
        Cow::Borrowed("a67"),
        Cow::Borrowed("a68"),
        Cow::Borrowed("a69"),
        Cow::Borrowed("a70"),
        Cow::Borrowed("a71"),
        Cow::Borrowed("a72"),
        Cow::Borrowed("a73"),
        Cow::Borrowed("a74"),
        Cow::Borrowed("a203"),
        Cow::Borrowed("a75"),
        Cow::Borrowed("a204"),
        Cow::Borrowed("a76"),
        Cow::Borrowed("a77"),
        Cow::Borrowed("a78"),
        Cow::Borrowed("a79"),
        Cow::Borrowed("a81"),
        Cow::Borrowed("a82"),
        Cow::Borrowed("a83"),
        Cow::Borrowed("a84"),
        Cow::Borrowed("a97"),
        Cow::Borrowed("a98"),
        Cow::Borrowed("a99"),
        Cow::Borrowed("a100"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("a101"),
        Cow::Borrowed("a102"),
        Cow::Borrowed("a103"),
        Cow::Borrowed("a104"),
        Cow::Borrowed("a106"),
        Cow::Borrowed("a107"),
        Cow::Borrowed("a108"),
        Cow::Borrowed("a112"),
        Cow::Borrowed("a111"),
        Cow::Borrowed("a110"),
        Cow::Borrowed("a109"),
        Cow::Borrowed("a120"),
        Cow::Borrowed("a121"),
        Cow::Borrowed("a122"),
        Cow::Borrowed("a123"),
        Cow::Borrowed("a124"),
        Cow::Borrowed("a125"),
        Cow::Borrowed("a126"),
        Cow::Borrowed("a127"),
        Cow::Borrowed("a128"),
        Cow::Borrowed("a129"),
        Cow::Borrowed("a130"),
        Cow::Borrowed("a131"),
        Cow::Borrowed("a132"),
        Cow::Borrowed("a133"),
        Cow::Borrowed("a134"),
        Cow::Borrowed("a135"),
        Cow::Borrowed("a136"),
        Cow::Borrowed("a137"),
        Cow::Borrowed("a138"),
        Cow::Borrowed("a139"),
        Cow::Borrowed("a140"),
        Cow::Borrowed("a141"),
        Cow::Borrowed("a142"),
        Cow::Borrowed("a143"),
        Cow::Borrowed("a144"),
        Cow::Borrowed("a145"),
        Cow::Borrowed("a146"),
        Cow::Borrowed("a147"),
        Cow::Borrowed("a148"),
        Cow::Borrowed("a149"),
        Cow::Borrowed("a150"),
        Cow::Borrowed("a151"),
        Cow::Borrowed("a152"),
        Cow::Borrowed("a153"),
        Cow::Borrowed("a154"),
        Cow::Borrowed("a155"),
        Cow::Borrowed("a156"),
        Cow::Borrowed("a157"),
        Cow::Borrowed("a158"),
        Cow::Borrowed("a159"),
        Cow::Borrowed("a160"),
        Cow::Borrowed("a161"),
        Cow::Borrowed("a163"),
        Cow::Borrowed("a164"),
        Cow::Borrowed("a196"),
        Cow::Borrowed("a165"),
        Cow::Borrowed("a192"),
        Cow::Borrowed("a166"),
        Cow::Borrowed("a167"),
        Cow::Borrowed("a168"),
        Cow::Borrowed("a169"),
        Cow::Borrowed("a170"),
        Cow::Borrowed("a171"),
        Cow::Borrowed("a172"),
        Cow::Borrowed("a173"),
        Cow::Borrowed("a162"),
        Cow::Borrowed("a174"),
        Cow::Borrowed("a175"),
        Cow::Borrowed("a176"),
        Cow::Borrowed("a177"),
        Cow::Borrowed("a178"),
        Cow::Borrowed("a179"),
        Cow::Borrowed("a193"),
        Cow::Borrowed("a180"),
        Cow::Borrowed("a199"),
        Cow::Borrowed("a181"),
        Cow::Borrowed("a200"),
        Cow::Borrowed("a182"),
        Cow::Borrowed(NOTDEF),
        Cow::Borrowed("a201"),
        Cow::Borrowed("a183"),
        Cow::Borrowed("a184"),
        Cow::Borrowed("a197"),
        Cow::Borrowed("a185"),
        Cow::Borrowed("a194"),
        Cow::Borrowed("a198"),
        Cow::Borrowed("a186"),
        Cow::Borrowed("a195"),
        Cow::Borrowed("a187"),
        Cow::Borrowed("a188"),
        Cow::Borrowed("a189"),
        Cow::Borrowed("a190"),
        Cow::Borrowed("a191"),
        Cow::Borrowed(NOTDEF),
    ]);
}

#[cfg(test)]
mod tests;
